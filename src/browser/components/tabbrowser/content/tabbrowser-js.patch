diff --git a/browser/components/tabbrowser/content/tabbrowser.js b/browser/components/tabbrowser/content/tabbrowser.js
index 14de79b543cf07b04d06ef5a3f94d9aa988ea39a..fe626dc19c9abaf4f9736ec6bcc8cf7d44bbdc10 100644
--- a/browser/components/tabbrowser/content/tabbrowser.js
+++ b/browser/components/tabbrowser/content/tabbrowser.js
@@ -462,11 +462,26 @@
       return duplicateTabs;
     },
 
+    get _numVisiblePinTabs() {
+      let i = 0;
+      for (let tab of this.tabs) {
+        if (!tab.pinned) {
+          break;
+        }
+        if (!tab.hidden) {
+          i++;
+        }
+      }
+      return i;
+    },
+
     get _numPinnedTabs() {
-      for (var i = 0; i < this.tabs.length; i++) {
-        if (!this.tabs[i].pinned) {
+      let i = 0;
+      for (let tab of this.tabs) {
+        if (!tab.pinned) {
           break;
         }
+        i++;
       }
       return i;
     },
@@ -1346,6 +1361,7 @@
       if (!this._previewMode) {
         newTab.recordTimeFromUnloadToReload();
         newTab.updateLastAccessed();
+        newTab.removeAttribute("unread");
         oldTab.updateLastAccessed();
         // if this is the foreground window, update the last-seen timestamps.
         if (this.ownerGlobal == BrowserWindowTracker.getTopWindow()) {
@@ -2431,7 +2447,7 @@
 
       let panel = this.getPanel(browser);
       let uniqueId = this._generateUniquePanelID();
-      panel.id = uniqueId;
+      if (!panel.id?.startsWith("zen-")) panel.id = uniqueId;
       aTab.linkedPanel = uniqueId;
 
       // Inject the <browser> into the DOM if necessary.
@@ -2491,7 +2507,7 @@
       // hasSiblings=false on both the existing browser and the new browser.
       if (this.tabs.length == 2) {
         this.tabs[0].linkedBrowser.browsingContext.hasSiblings = true;
-        this.tabs[1].linkedBrowser.browsingContext.hasSiblings = true;
+        if (this.tabs[1].linkedBrowser.browsingContext) this.tabs[1].linkedBrowser.browsingContext.hasSiblings = true;
       } else {
         aTab.linkedBrowser.browsingContext.hasSiblings = this.tabs.length > 1;
       }
@@ -2711,6 +2727,11 @@
         );
       }
 
+      let hasZenDefaultUserContextId = false;
+      if (typeof ZenWorkspaces !== "undefined") {
+        [userContextId, hasZenDefaultUserContextId] = ZenWorkspaces.getContextIdIfNeeded(userContextId, fromExternal, allowInheritPrincipal);
+      }
+
       if (!UserInteraction.running("browser.tabs.opening", window)) {
         UserInteraction.start("browser.tabs.opening", "initting", window);
       }
@@ -2780,6 +2801,9 @@
           noInitialLabel,
           skipBackgroundNotify,
         });
+        if (hasZenDefaultUserContextId) {
+          t.setAttribute("zenDefaultUserContextId", "true");
+        }
         if (insertTab) {
           // insert the tab into the tab container in the correct position
           this._insertTabAtIndex(t, {
@@ -3291,6 +3315,14 @@
         ) {
           tabWasReused = true;
           tab = this.selectedTab;
+
+          if (tabData.zenWorkspace) {
+            tab.setAttribute("zen-workspace-id", tabData.zenWorkspace);
+          }
+          if (tabData.zenDefaultUserContextId) {
+            tab.setAttribute("zenDefaultUserContextId", "true");
+          }
+
           if (!tabData.pinned) {
             this.unpinTab(tab);
           } else {
@@ -3304,6 +3336,9 @@
             restoreTabsLazily && !select && !tabData.pinned;
 
           let url = "about:blank";
+
+          gZenPinnedTabManager.resetPinnedTabData(tabData);
+
           if (tabData.entries?.length) {
             let activeIndex = (tabData.index || tabData.entries.length) - 1;
             // Ensure the index is in bounds.
@@ -3340,6 +3375,12 @@
             preferredRemoteType,
           });
 
+          if (tabData.zenWorkspace) {
+            tab.setAttribute("zen-workspace-id", tabData.zenWorkspace);
+          }
+          if (tabData.zenDefaultUserContextId) {
+            tab.setAttribute("zenDefaultUserContextId", "true");
+          }
           if (select) {
             tabToSelect = tab;
           }
@@ -3374,7 +3415,7 @@
             this.tabContainer._invalidateCachedTabs();
           }
         }
-
+        gZenPinnedTabManager.updatePinnedTabForSessionRestore(tabData, tab);
         tab.initialize();
       }
 
@@ -4148,6 +4189,13 @@
         TelemetryStopwatch.start("FX_TAB_CLOSE_TIME_NO_ANIM_MS", aTab);
       }
 
+      if (ZenWorkspaces.workspaceEnabled) {
+        let newTab = ZenWorkspaces.handleTabBeforeClose(aTab);
+        if (newTab) {
+          this.selectedTab = newTab;
+        }
+      }
+
       // Handle requests for synchronously removing an already
       // asynchronously closing tab.
       if (!animate && aTab.closing) {
@@ -5123,10 +5171,10 @@
       SessionStore.deleteCustomTabValue(aTab, "hiddenBy");
     },
 
-    hideTab(aTab, aSource) {
+    hideTab(aTab, aSource, forZenWorkspaces = false) {
       if (
         aTab.hidden ||
-        aTab.pinned ||
+        (aTab.pinned && !forZenWorkspaces) ||
         aTab.selected ||
         aTab.closing ||
         // Tabs that are sharing the screen, microphone or camera cannot be hidden.
@@ -7042,6 +7090,7 @@
             aWebProgress.isTopLevel
           ) {
             this.mTab.setAttribute("busy", "true");
+            if (!this.mTab.selected) this.mTab.setAttribute("unread", "true");
             gBrowser._tabAttrModified(this.mTab, ["busy"]);
             this.mTab._notselectedsinceload = !this.mTab.selected;
             gBrowser.syncThrobberAnimations(this.mTab);
@@ -7874,7 +7923,7 @@ var TabContextMenu = {
     );
     contextUnpinSelectedTabs.hidden =
       !this.contextTab.pinned || !multiselectionContext;
-
+    gZenPinnedTabManager.updatePinnedTabContextMenu(this.contextTab);
     // Move Tab items
     let contextMoveTabOptions = document.getElementById(
       "context_moveTabOptions"
