diff --git a/browser/components/tabbrowser/content/tabs.js b/browser/components/tabbrowser/content/tabs.js
index f9e256b143786c18ba85859ca1b11182ab23f1aa..faeddb59825c8db4f9e9c6ebefe63302a8b02e5d 100644
--- a/browser/components/tabbrowser/content/tabs.js
+++ b/browser/components/tabbrowser/content/tabs.js
@@ -155,6 +155,13 @@
         false
       );
       this.tooltip = "tabbrowser-tab-tooltip";
+
+      XPCOMUtils.defineLazyPreferenceGetter(
+        this,
+        "_openNewTabByDblclick",
+        "zen.tabs.open-newtab-by-dblclick",
+        true
+      );
     }
 
     attributeChangedCallback(name, oldValue, newValue) {
@@ -309,11 +316,13 @@
         return;
       }
 
-      if (!this._blockDblClick) {
+      if (!this._blockDblClick && this._openNewTabByDblclick) {
         BrowserCommands.openTab();
       }
 
-      event.preventDefault();
+      if(this._openNewTabByDblclick) {
+        event.preventDefault();
+      }
     }
 
     on_click(event) {
@@ -541,7 +550,7 @@
       if (this.#isContainerVerticalPinnedExpanded(tab)) {
         // In expanded vertical mode, the max number of pinned tabs per row is dynamic
         // Set this before adjusting dragged tab's position
-        let pinnedTabs = this.visibleTabs.slice(0, gBrowser.pinnedTabCount);
+        let pinnedTabs = this.visibleTabs.slice(0, gBrowser._numVisiblePinTabs);
         let tabsPerRow = 0;
         let position = 0;
         for (let pinnedTab of pinnedTabs) {
@@ -918,7 +927,7 @@
             let postTransitionCleanup = () => {
               tab.removeAttribute("tabdrop-samewindow");
 
-              this._finishAnimateTabMove();
+              this._finishAnimateTabMove(true);
               if (dropIndex !== false) {
                 gBrowser.moveTabTo(tab, dropIndex);
                 if (incrementDropIndex) {
@@ -928,7 +937,7 @@
 
               gBrowser.syncThrobberAnimations(tab);
             };
-            if (gReduceMotion) {
+            if (gReduceMotion || true) {
               postTransitionCleanup();
             } else {
               let onTransitionEnd = transitionendEvent => {
@@ -1077,7 +1086,8 @@
       if (
         dt.mozUserCancelled ||
         dt.dropEffect != "none" ||
-        this._isCustomizing
+        this._isCustomizing ||
+        draggedTab.pinned
       ) {
         delete draggedTab._dragData;
         return;
@@ -1328,7 +1338,7 @@
         }
       }
 
-      this.#allTabs = [...verticalPinnedTabsContainer.children, ...children];
+      this.#allTabs = [...document.getElementById("zen-essentials-container").children, ...verticalPinnedTabsContainer.children, ...children];
       return this.#allTabs;
     }
 
@@ -1520,10 +1530,12 @@
 
     _handleTabSelect(aInstant) {
       let selectedTab = this.selectedItem;
-      if (this.overflowing) {
-        this.arrowScrollbox.ensureElementIsVisible(selectedTab, aInstant);
-      }
+      this.arrowScrollbox.ensureElementIsVisible(selectedTab, aInstant);
 
+      if (!aInstant && Services.prefs.getBoolPref('zen.view.compact')
+          && Services.prefs.getBoolPref('zen.view.compact.toolbar-flash-popup')) {
+        gZenCompactModeManager.flashSidebar();
+      }
       selectedTab._notselectedsinceload = false;
     }
 
@@ -1571,7 +1583,7 @@
         if (isEndTab && !this._hasTabTempMaxWidth) {
           return;
         }
-        let numPinned = gBrowser.pinnedTabCount;
+        let numPinned = gBrowser._numVisiblePinTabs;
         // Force tabs to stay the same width, unless we're closing the last tab,
         // which case we need to let them expand just enough so that the overall
         // tabbar width is the same.
@@ -1586,7 +1598,7 @@
         let tabsToReset = [];
         for (let i = numPinned; i < tabs.length; i++) {
           let tab = tabs[i];
-          tab.style.setProperty("max-width", aTabWidth, "important");
+          //tab.style.setProperty("max-width", aTabWidth, "important");
           if (!isEndTab) {
             // keep tabs the same width
             tab.style.transition = "none";
@@ -1651,13 +1663,13 @@
       let verticalTabsContainer = document.getElementById(
         "vertical-pinned-tabs-container"
       );
-      let numPinned = gBrowser.pinnedTabCount;
+      let numPinned = gBrowser._numVisiblePinTabs;
 
       if (gBrowser.pinnedTabCount !== verticalTabsContainer.children.length) {
         let tabs = this.visibleTabs;
         for (let i = 0; i < numPinned; i++) {
           tabs[i].style.marginInlineStart = "";
-          verticalTabsContainer.appendChild(tabs[i]);
+          tabs[i].hasAttribute("zen-essential") ? document.getElementById("zen-essentials-container").appendChild(tabs[i]) : verticalTabsContainer.appendChild(tabs[i]);
         }
       }
 
@@ -1681,7 +1693,7 @@
 
     _positionPinnedTabs() {
       let tabs = this.visibleTabs;
-      let numPinned = gBrowser.pinnedTabCount;
+      let numPinned = gBrowser._numVisiblePinTabs;
       let absPositionHorizontalTabs =
         this.overflowing && tabs.length > numPinned && numPinned > 0;
 
@@ -1762,7 +1774,7 @@
         return;
       }
 
-      let tabs = this.visibleTabs.slice(0, gBrowser.pinnedTabCount);
+      let tabs = this.visibleTabs.slice(0, gBrowser._numVisiblePinTabs);
 
       let directionX = screenX > dragData.animLastScreenX;
       let directionY = screenY > dragData.animLastScreenY;
@@ -1948,7 +1960,7 @@
       }
 
       let pinned = draggedTab.pinned;
-      let numPinned = gBrowser.pinnedTabCount;
+      let numPinned = gBrowser._numVisiblePinTabs;
       let tabs = this.visibleTabs.slice(
         pinned ? 0 : numPinned,
         pinned ? numPinned : undefined
@@ -2140,8 +2152,8 @@
       );
     }
 
-    _finishAnimateTabMove() {
-      if (!this.hasAttribute("movingtab")) {
+    _finishAnimateTabMove(always = false) {
+      if (!this.hasAttribute("movingtab") && !always) {
         return;
       }
 
